= Getting started =

This short guide will help you to get started with MicroBridge. The examples assume Linux (Ubuntu 10.04), but you should be able to make it work on other platforms that support the standard avr tools.

= Hardware =

== Sparkfun shield ==

MicroBridge was developed initially using an [http://arduino.cc/en/Main/ArduinoBoardMega Arduino Mega] and a [http://www.sparkfun.com/products/9947 Sparkfun USB Host shield], but the 'smaller' Arduinos like the [http://arduino.cc/en/Main/ArduinoBoardUno Uno] and [http://www.arduino.cc/en/Main/ArduinoBoardDiecimila Deicimila] are also supported. 

Here's a picture of a Uno with the USB host shield connected to my Android phone. In case you were wondering, it's a [http://en.wikipedia.org/wiki/ZTE_Blade ZTE Blade].

http://i54.tinypic.com/b7j5o8.jpg

== USB 2.0 shield ==

The SparkFun shield was based on a design by [http://circuits@home Oleg], 
and he has released a new [http://www.circuitsathome.com/products-page/arduino-shields/usb-host-shield-2-0-for-arduino/ 2.0 version of the shield] that is compatible with the Mega out of the box. 

= Software =

== Prerequisites ==

I'm going to assume you're on Linux and have the standard avr development packages installed, as well as doxygen and make. I've included an upload script that resets the Arduino by pulsing the DTR line, it uses a perl library called {{{libdevice-serialport-perl}}}. For this example I'm using putty, so you might want to grab that too. On Ubuntu, you can type:

{{{
sudo apt-get install gcc-avr gdb-avr avr-libc binutils-avr avrdude doxygen make libdevice-serialport-perl putty
}}}

== Checking out the code and building ==

Grab the source from SVN, go into {{{/trunk/src/mcu}}} and edit the makefile. Set the {{{MMCU}}} variable to the correct chip depending on your board (i.e. 328p for the Uno), and type {{{make}}}. 

== Running ==

Upload the resulting elf/ihex to your Arduino with your favorite bootloader tool (i.e. avrdude) or use the {{{program}}} script provided.

Now open putty, and enter the path to your Arduino's USB serial device into the host name field (i.e. {{{/dev/ttyUSB0}}}). Set connection type to 'serial', and baud rate to 57600. In the 'terminal' settings, check 'Implicit CR in every LF'. Optionally save these settings by typing a name for the connection in the 'saved sessions' field an hit 'save'. 

Now hit 'connect'. If all goes well you should see the following:

{{{
ADB EVENT CONNECT
ADB EVENT OPEN connection=[shell:]
# 
}}}

Now you can type into the shell and issue commands, such as 'ls' to get a directory listing.

= Writing your own program =

The quickest way to get your own Android app to talk to your Arduino is by using logcat. 

== Android side ==

Write a simple Android application, perhaps with a button or a slider, and connect an event handler. Inside the handler simply use Android's built-in logging facility to output some data. For example:

{{{Log.d("MYAPP", "Hello from Android!");}}}

== Arduino side ==

The arduino can now catch this message by connecting to the phone and reading logcat through adb.

A minimal program would look something like this (included in the source tree as example.c):

{{{
#include "avr.h"
#include "adb.h"

// Event handler to process incoming data from ADB.
void adbEventHandler(adb_connection * connection, adb_eventType event, uint16_t length, uint8_t * data)
{
	int i;

	switch (event)
	{
	case ADB_CONNECTION_RECEIVE:

		// Write the results to UART
		for (i=0; i<length; i++)
			avr_serialPrintf("%c", data[i]);

		break;
	default:
		break;
	}

}

int main()
{
	// Initialise avr timers
	avr_timerInit();

	// Initialise serial port
	avr_serialInit(57600);

 	// Initialise ADB connection
	adb_init();

	// Create a new ADB connection, run logcat
	adb_addConnection("shell:exec logcat -s MYAPP:*", false, adbEventHandler);

	// ADB polling.
	while (1)
		adb_poll();

	return 0;
}
}}}

The call {{{adb_addConnection("shell:exec logcat -s MYAPP:*", false, adbEventHandler);}}} creates a new connection that starts the logcat program on the phone side and pipes stdout over ADB back to the Arduino. The boolean argument {{{persistent}}} is to indicate whether to automatically reconnect when the connection is closed or the device is reconnected. Note that MicroBridge is event based, so an event handler must be provided to process the incoming data.